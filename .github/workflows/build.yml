name: CD MyBurger - BDD

on:
  pull_request:
    branches:
      - main

jobs:
  deploy:
    name: Run BDD
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      DATABASE_USERNAME: doadmin

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Autenticação com a DigitalOcean
      - name: Set up DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN_ACCESS }}

      - name: Ensure .env file exists
        run: |
          mkdir -p myburger-bdd-test
          touch myburger-bdd-test/.env

      # Recupera os dados de BD
      - name: Get db user and host
        run: |
          PG_DB_ID=$(doctl db list | grep pg | awk '{print $1}')
          DATABASE_PASSWORD=$(doctl databases user get $PG_DB_ID $DATABASE_USERNAME --format Password --no-header)
          DATABASE_URL=$(doctl databases connection $PG_DB_ID --format Host --no-header)
          PG_DB_PORT=$(doctl databases connection $PG_DB_ID --format Port --no-header)
          echo "PG_DB_PORT"=$PG_DB_PORT >> $GITHUB_ENV
          echo "DATABASE_URL"=$DATABASE_URL >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> $GITHUB_ENV

      # Armazenar o ID do primeiro cluster na variável de ambiente
      - name: Get First Cluster ID
        run: |
          CLUSTER_ID=$(doctl kubernetes cluster list --format ID --no-header | head -n 1)
          echo "CLUSTER_ID=$CLUSTER_ID" >> $GITHUB_ENV

      # Autenticação com o cluster Kubernetes
      - name: Set up Kubernetes save
        run: |
          doctl kubernetes cluster kubeconfig save ${{ env.CLUSTER_ID }}

      # Recuperar o endereço do gateway
      - name: Get Gateway IP
        run: |
          MYBURGER_BASE_URI=$(doctl compute droplet list 'my-burger-api-gtw' --format 'Public IPv4' --no-header | head -n 1)
          echo "MYBURGER_BASE_URI=$MYBURGER_BASE_URI" >> $GITHUB_ENV

      # Configurando e executando a app BDD
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"

      - name: Run tests
        run: ./gradlew test --info --stacktrace
